#include <Servo.h>
#include <HCSR04.h>
#include <Pixy2.h>


// Pins for Motor
int R_IS = 2;
int R_EN = 5;
int R_PWM = 6;
int L_IS = 3;
int L_EN = 4;
int L_PWM = 7;

// Define the pins for the ultrasonic sensors
int LeftSensorPinTrig = 25;
int LeftSensorPinEcho = 24;
int RightSensorPinTrig = 22;
int RightSensorPinEcho = 23;
int FrontSensorPinTrig = 27;
int FrontSensorPinEcho = 26;

// Button pin
int ButtonPin = A0;

// Set the max range for the ultrasonic
int FrontDistanceRange = 35;
int LeftDistanceRange = 50;
int RightDistanceRange = 50;

// ServoMotor
int ServoPin = 28;

// Set the rotation of the servo
int LeftServoRotation = 0;
int RightServoRotation = 180;
int CenterServoRotation = 90;

// Signature for the PixyCam
int RedColorSignature = 1;
int GreenColorSignature = 2;

// Debug
bool Debug = false;
bool ButtonEnabled = false; // Enable or disable button for testing purpose
bool BotInRotation = false;


HCSR04 LeftSensor(LeftSensorPinTrig, LeftSensorPinEcho);
HCSR04 RightSensor(RightSensorPinTrig, RightSensorPinEcho);
HCSR04 FrontSensor(FrontSensorPinTrig, FrontSensorPinEcho);
Servo servo;
Pixy2 pixy;

// PID control variables
double setpoint = 0, input, output;
double Kp = 1.0, Ki = 0.0, Kd = 0.0;
int DefaultVelocity = 200;
int CurrentVelocity = DefaultVelocity;

void MotorForward() {
  analogWrite(R_PWM, 0);
  analogWrite(L_PWM, CurrentVelocity);
}

void MotorBackward() {
    analogWrite(R_PWM, CurrentVelocity);
   analogWrite(L_PWM, 0);
}

void ServoRotation(int Angle) {
  servo.write(Angle);
}

void setup() {
  pinMode(R_IS, OUTPUT);
  pinMode(R_EN, OUTPUT);
  pinMode(R_PWM, OUTPUT);
  pinMode(L_IS, OUTPUT);
  pinMode(L_EN, OUTPUT);
  pinMode(L_PWM, OUTPUT);
  digitalWrite(R_IS, LOW);
  digitalWrite(L_IS, LOW);
  digitalWrite(R_EN, HIGH);
  digitalWrite(L_EN, HIGH);
  pinMode(ServoPin, OUTPUT);
  pinMode(ButtonPin, INPUT);
  Serial.begin(9600);

  ServoRotation(CenterServoRotation);

  // Initialize PixyCam
  pixy.init();
}

void loop() {

  if (ButtonEnabled == true) {
     int buttonState = 0;
     buttonState = digitalRead(ButtonPin);
     if (buttonState == 0) {
      Serial.println("Pressed >");
      }
    }
  }

  int FrontDistance = FrontSensor.dist();
  int LeftDistance = LeftSensor.dist();
  int RightDistance = RightSensor.dist(); // Get the distance of the ultrasonic sensors
  bool RedBlockDetected = false;
  bool GreenBlockDetected = false;

  if (Debug == true) {
    Serial.print("Left Distance: ");
    Serial.println(LeftDistance);
    Serial.print("Right Distance: ");
    Serial.println(RightDistance);
    Serial.print("Front Distance: ");
    Serial.println(FrontDistance);
  }

  // Get the largest object detected by the PixyCam
  pixy.ccc.getBlocks();
  if (pixy.ccc.numBlocks) {
    for (int i = 0; i < pixy.ccc.numBlocks; i++) {
      if (pixy.ccc.blocks[i].m_signature == RedColorSignature) {
        RedBlockDetected = true;
      } else if (pixy.ccc.blocks[i].m_signature == GreenColorSignature) {
        GreenBlockDetected = true;
      }
    }
  }

  // Color-based directional control
  if ((RedBlockDetected || GreenBlockDetected) && !BotInRotation) {
    CurrentVelocity = 135;
    if (RedBlockDetected) {
      ServoRotation(RightServoRotation);
    } else if (GreenBlockDetected) {
      ServoRotation(LeftServoRotation);
    }
    BotInRotation = true;
  } else if (FrontDistance <= FrontDistanceRange && FrontDistance > 0) {
    CurrentVelocity = 135;
    if (LeftDistance <= LeftDistanceRange || LeftDistance < RightDistance) {
      ServoRotation(CenterServoRotation + RightServoRotation); // Turn right
    } else if (RightDistance <= RightDistanceRange || RightDistance < LeftDistance ) {
      ServoRotation(CenterServoRotation + LeftServoRotation); // Turn left
    }
    
    
    //MotorBackward(); // Move backward to avoid obstacle

  } else {
    BotInRotation = false;
    CurrentVelocity = DefaultVelocity;
    ServoRotation(CenterServoRotation);

    // Calculate the input for the PID controller
    input = LeftDistance - RightDistance; // Difference between left and right distances

    // Adjust the servo position based on PID output
   // ServoRotation(CenterServoRotation + output);  // CenterServoRotation is the center position

    MotorForward();
  }

  // Short delay
  delay(100);
}
