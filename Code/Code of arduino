Round 1

#include <Servo.h>
#include <Ultrasonic.h>

#include <Pixy2.h>
#include <PID_v1.h>


// Pins for Motor
int R_IS = 2;
int R_EN = 5;
int R_PWM = 6;
int L_IS = 3;
int L_EN = 4;
int L_PWM = 7;

// Define the pins for the ultrasonic sensors
int LeftSensorPinTrig = 25;
int LeftSensorPinEcho = 24;

int RightSensorPinTrig = 27;
int RightSensorPinEcho = 26;

int FrontSensorPinTrig = 53;
int FrontSensorPinEcho = 52;

// Button pin
int ButtonPin = A0;

// Set the max range for the ultrasonic
int FrontDistanceRange = 35;
int LeftDistanceRange = 50;
int RightDistanceRange = 50;

// ServoMotor
int ServoPin = 8;

// Set the rotation of the servo
int LeftServoRotation = 155;
int RightServoRotation = 10;
int CenterServoRotation = 90;

// Signature for the PixyCam
int RedColorSignature = 1;
int GreenColorSignature = 2;
//
int CurrentYellowLine = 0;
int YellowMax = 12;
 

// Debug
bool Debug = false;
// Bools
bool EnableObstacleChallenge = false;
bool BotStopped  = false;
 bool BotInRotation = false;

Servo servo;
Pixy2 pixy;


void MotorForward(int Velocity) {
 analogWrite(R_PWM, 0);
 analogWrite(L_PWM, Velocity);
}

void MotorBackward(int Velocity) {
  analogWrite(R_PWM, Velocity);
  analogWrite(L_PWM, 0);
}

void ServoRotation(int Angle) {
  servo.write(Angle);
}

void setup() {
  pinMode(R_IS, OUTPUT);
  pinMode(R_EN, OUTPUT);
  pinMode(R_PWM, OUTPUT);
  pinMode(L_IS, OUTPUT);
  pinMode(L_EN, OUTPUT);
  pinMode(L_PWM, OUTPUT);
  digitalWrite(R_IS, LOW);
  digitalWrite(L_IS, LOW);
  digitalWrite(R_EN, HIGH);
  digitalWrite(L_EN, HIGH);
  servo.attach(ServoPin);
  pinMode(ButtonPin, INPUT);
  Serial.begin(9600);
  ServoRotation(CenterServoRotation);

  pinMode(FrontSensorPinTrig, OUTPUT); // Sets the trigPin as an Output
  pinMode(FrontSensorPinEcho, INPUT); // Sets the echoPin as an Input

  pinMode(RightSensorPinTrig, OUTPUT); // Sets the trigPin as an Output
  pinMode(RightSensorPinEcho, INPUT); // Sets the echoPin as an Input

  pinMode(LeftSensorPinTrig, OUTPUT); // Sets the trigPin as an Output
  pinMode(LeftSensorPinEcho, INPUT); // Sets the echoPin as an Input

  BotInRotation = false;

   
  // Initialize PixyCam
 // pixy.init();
}
//Ultrasonic FrontSensor(FrontSensorPinTrig, FrontSensorPinEcho);
//Ultrasonic RightSensor(RightSensorPinTrig, RightSensorPinEcho);
//Ultrasonic LeftSensor(LeftSensorPinTrig, LeftSensorPinEcho);
  


// MotorForward(Velocidad); = hace que el bot avance
// MotorBackward(Velocidad); = hace que el bot vaya para atras
// delay(tiempo en ms) = hace un delay 
// ServoRotation(Angulo) = hace que el motor vaya a un cierto angulo

int GetUltrasonicDistance(int Echo, int Trig) {
   // Clears the trigPin
  digitalWrite(Trig, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 microseconds
  digitalWrite(Trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trig, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  int duration = pulseIn(Echo, HIGH);
  // Calculating the distance
  int distance = duration * 0.034 / 2;
  return distance;  // This line is correct because the function now returns an int
}


void OpenChallenge () {
  // First Edge
  
  int FrontDistance = GetUltrasonicDistance(FrontSensorPinEcho,FrontSensorPinTrig);
  int LeftDistance = GetUltrasonicDistance(LeftSensorPinEcho,LeftSensorPinTrig);
  int RightDistance = GetUltrasonicDistance(RightSensorPinTrig,RightSensorPinEcho);
  MotorForward(75);
  
  if (LeftDistance < 12 || RightDistance <12) {
    
    if (LeftDistance <12) {
      ServoRotation(40);
    } else if (RightDistance <12) {
      ServoRotation(140);
    }


  } else if (FrontDistance <60) {
    ServoRotation(40);
    FrontDistance = GetUltrasonicDistance(FrontSensorPinEcho,FrontSensorPinTrig);
    
    if (FrontDistance <30) {
      if (FrontDistance < 10) {
        ServoRotation(CenterServoRotation);
      delay(1000);
      MotorBackward(1000);
      delay(500);
      MotorForward(0);
      } else if (FrontDistance <= 30) {
        ServoRotation(30);
      }
    }


  } else {
    ServoRotation(CenterServoRotation);
  }
  
  delay(100);

}
 
int Loop = 1;

void loop() {
  
  
  if (BotStopped == true) {
    return;
  }

  if (EnableObstacleChallenge == false) {
    
    OpenChallenge();  
     
  } else if (EnableObstacleChallenge == true) {
    Serial.println(31);
  }
  


}
